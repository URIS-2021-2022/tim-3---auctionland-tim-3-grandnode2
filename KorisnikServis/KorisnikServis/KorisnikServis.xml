<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KorisnikServis</name>
    </assembly>
    <members>
        <member name="T:KorisnikServis.Controllers.KorisnikController">
            <summary>
            Korisnik Controller pomocu kojeg se vrse sve potrebne funkcionalnosti iz specifikacije vezane za korisnika
            </summary>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.#ctor(KorisnikServis.Token.IGenerateToken,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Korisnik Controller konstruktor
            </summary>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.Get">
            <summary>
            Pristup svim korisnicima, koji je omogucen od strane prethodno ulogovanog korisnika koji ima ulogu Administratora u sistemu, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <returns>Vraca listu svih korisnika</returns>
            <remarks>
            <strong>
            Potrebno je prethodno ulogovati postojeceg korisnika \
            </strong>
            </remarks>
            <response code = "200">Pristup svim korisnicima</response>
            <response code = "401">Korisnik nije ulogovan</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.GetKorisnikUP(System.String,System.String)">
            <summary>
            Pristup korisniku na osnovu korisnickog imena i lozinke od strane korisnika koji imaju uloge: Administrator, Superuser, 
            Tehnicki sekretar, Prva komisija i Menadzer, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <param name="KorisnickoIme">Primer korisnickog imena: markoo</param>
            <param name="Lozinka">Primer lozinke: marko123</param>
            <returns>Vraca korisnika sa zadatim korisnickim imenom i lozinkom</returns>
            <response code = "200">Pristup korisniku putem korisnickog imena i lozinke</response>
            <response code = "401">Korisnik nije ulogovan</response>
            <response code = "404">Ne postoji korisnik sa zadatim korisnickim imenom ili lozinkom</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.LogIn(KorisnikServis.Database.Entities.Korisnik)">
             <summary>
             Logovanje korisnika putem korisnickog imena i lozinke, kako bi se omogucila autentifikacija korisnika kroz utvrdjivanje identiteta
             korisnika kako bi mu se omogucio pristup sistemu, 
             uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
             </summary>
             <param name="korisnik"></param>
             <returns>Vraca token na osnovu logovanja korisnika</returns>
             <remarks>
             <strong>
             Primer request-a za logovanje postojeceg korisnika \
             !!!!!! Ovaj json je potrebno kopirati u request body kako bi uspesno testirali!!!!! \
             POST api/Korisnik/ \
             </strong>
            { \
                 "korisnickoIme": "markoo", \
                 "lozinka": "marko123" \
            }
             </remarks>
             <response code = "200">Dobijanje tokena na osnovu korisnickog imena i lozinke </response>
             <response code = "404">Ne postoji korisnik sa zadatim korisnickim imenom ili lozinkom</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.GetById(System.Guid)">
            <summary>
            Pristup korisniku na osnovu zadatog id-a
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <param name="id">Id korisnika primer: bbc752be-d0b8-41f0-94e8-d54df388a9f0</param>
            <returns>Vraca korisnika ciji id je zadat u putanji</returns>
            <response code = "200">Dobijanje korisnika na osnovu zadatog id-a</response>
            <response code = "401">Korisnik nije ulogovan</response>
            <response code = "404">Ne postoji korisnik sa zadatim id-em</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.GetByNazivTipa(System.String)">
            <summary>
            Pristup korisnicima na osnovu naziva uloge koju imaju, definisanu kroz tip korisnika, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <param name="nazivTipa">Primer uloge: Administrator</param>
            <returns>Vraca korisnika sa zadatom ulogom</returns>
            <response code = "200">Dobijanje korisnika na osnovu zadate uloge koju ima</response>
            <response code = "401">Korisnik nije ulogovan</response>
            <response code = "404">Ne postoji korisnik sa zadatom ulogom</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.GetKorisnikToken">
            <summary>
            Dobijanje svih bitnih informacija o korisniku na osnovu tokena, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <returns>Vraca korisnika na osnovu zadatog tokena</returns>
            <response code = "200">Dobijanje korisnika na osnovu zadatog tokena</response>
            <response code = "404">Ne postoji korisnik sa zadatim tokenom</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.Post(KorisnikServis.Database.Entities.Korisnik)">
             <summary>
             Kreiranje novog korisnika, 
             uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
             </summary>
             <param name="model">Model korisnika</param>
             <returns>Vraca novog korisnika</returns>
             <remarks>
             <strong>
             Primer request-a za kreiranje novog korisnika \
             !!!!!! Ovaj json je potrebno kopirati u request body kako bi uspesno testirali!!!!! \
             POST api/Korisnik/ \
             </strong>
            { \
                 "imeKorisnika": "Mika", \
                 "prezimeKorisnika": "Lazic", \
                 "korisnickoIme": "lazaa", \
                 "lozinka": "laza123", \
                 "tipKorisnikaID": "e012104b-5e48-4d2f-b1a9-9a89a28230d2" \
            }
             </remarks>
             <response code = "201">Kreiran je novi korisnik</response>
             <response code = "401">Korisnik nije ulogovan</response>
             <response code = "500">Greska prilikom pokusaja kreiranja korisnika</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.Put(System.Guid,KorisnikServis.Database.Entities.Korisnik)">
             <summary>
             Modifikacija postojeceg korisnika,  od strane korisnika koji imaju uloge: Administrator, Superuser, 
             Tehnicki sekretar, Prva komisija, Menadzer i Operater nadmetanja, 
             uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
             </summary>
             <param name="id">Parametar na osnovu kojeg se identifikuje korisnik za azuriranje af133d94-bc4f-4073-8097-3cbbd46b04dd</param>
             <param name="korisnik">Model novog korisnika</param>
             <returns>Vraca modifikovanog korisnika</returns>
             <remarks>
             <strong>
             Primer request-a za modifikovanje korisnika \
             !!!!!! Ovaj json je potrebno kopirati u request body kako bi uspesno testirali!!!!! \
             PUT api/Korisnik/af133d94-bc4f-4073-8097-3cbbd46b04dd \
             </strong>
            { \
                 "korisnikID": "af133d94-bc4f-4073-8097-3cbbd46b04dd", \
                 "imeKorisnika": "LazaModifikovan", \
                 "prezimeKorisnika": "Lazic", \
                 "korisnickoIme": "lazaa", \
                 "lozinka": "laza123", \
                 "tipKorisnikaID": "e012104b-5e48-4d2f-b1a9-9a89a28230d2" \
            }
             </remarks>
             <response code = "200">Dobijanje modifikovanog korisnika</response>
             <response code = "400">Nisu dobro prosledjeni podaci</response>
             <response code = "401">Korisnik nije ulogovan</response>
             <response code = "404">Ne postoji korisnik sa zadatim id-em</response>
        </member>
        <member name="M:KorisnikServis.Controllers.KorisnikController.Delete(System.Guid)">
            <summary>
            Brisanje postojeceg korisnika od strane korisnika koji ima ulogu Administratora, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <param name="id">Parametar id-a korisnika za kojeg se izvrsava brisanje</param>
            <returns>Brise zadatog korisnika</returns>
            <response code = "200">Obrisan je korisnik</response>
            <response code = "401">Korisnik nije ulogovan</response>
            <response code = "404">Ne postoji korisnik za kojeg se izvrsava brisanje</response>
        </member>
        <member name="T:KorisnikServis.Controllers.TipKorisnikaController">
            <summary>
            Tip korisnika controller pomocu kojeg se vrse sve potrebne funkcionalnosti iz specifikacije vezane za tip korisnika
            </summary>
        </member>
        <member name="M:KorisnikServis.Controllers.TipKorisnikaController.#ctor">
            <summary>
            Tip korisnika controller konstruktor
            </summary>
        </member>
        <member name="M:KorisnikServis.Controllers.TipKorisnikaController.Get">
            <summary>
            Pristup svim tipovima korisnika, koji je omogucen od strane prethodno ulogovanog korisnika, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <returns>Vraca listu svih tipova korisnika</returns>
            <response code = "200">Pristup svim tipovima korisnika</response>
            <response code = "401">Korisnik nije ulogovan</response>
        </member>
        <member name="M:KorisnikServis.Controllers.TipKorisnikaController.Get(System.Guid)">
            <summary>
            Pristup svim tipovima korisnika na osnovu id-a, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <param name="id">Id tipa korisnika primer: 76b67f3a-f669-4b8f-9f6a-20a66107d312</param>
            <returns>Vraca tip korisnika sa zadatim id-em</returns>
            <response code = "200">Dobijanje tipa korisnika na osnovu zadatog id-a</response>
            <response code = "401">Korisnik nije ulogovan</response>
            <response code = "404">Ne postoji tip korisnika sa zadatim id-em</response>
        </member>
        <member name="M:KorisnikServis.Controllers.TipKorisnikaController.Post(KorisnikServis.Database.Entities.TipKorisnika)">
             <summary>
             Kreiranje novog tipa korisnika, 
             uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
             </summary>
             <param name="model">Model tipa korisnika</param>
             <returns>Vraca novi tip korisnika</returns>
             <remarks>
             <strong>
             Primer request-a za kreiranje novog tipa korisnika \
             !!!!!! Ovaj json je potrebno kopirati u request body kako bi uspesno testirali!!!!! \
             POST api/TipKorisnika/ \
             </strong>
            { \
                 "nazivTipa": "Beleznik" \
            }
             </remarks>
             <response code = "201">Kreiran je novi tip korisnika</response>
             <response code = "401">Korisnik nije ulogovan</response>
             <response code = "500">Greska prilikom pokusaja kreiranja novog tipa korisnika</response>
        </member>
        <member name="M:KorisnikServis.Controllers.TipKorisnikaController.Put(System.Guid,KorisnikServis.Database.Entities.TipKorisnika)">
             <summary>
             Modifikacija postojeceg tipa korisnika, 
             uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
             </summary>
             <param name="id">Parametar na osnovu kojeg se identifikuje tip korisnika za azuriranje 76b67f3a-f669-4b8f-9f6a-20a66107d312</param>
             <param name="tipKorisnika">Model novog tipa korisnika</param>
             <returns>Vraca modifikovani tip korisnika</returns>
             <remarks>
             <strong>
             Primer request-a za modifikaciju korisnika \
             !!!!!! Ovaj json je potrebno kopirati u request body kako bi uspesno testirali!!!!! \
             PUT api/TipKorisnika/76b67f3a-f669-4b8f-9f6a-20a66107d312 \
             </strong>
            { \
                 "tipKorisnikaID": "76b67f3a-f669-4b8f-9f6a-20a66107d312", \
                 "nazivTipa": "Operater Nadmetanja Modifikovan" \
            }
             </remarks>
             <response code = "200">Dobijanje modifikovanog tipa korisnika</response>
             <response code = "400">Nisu prosledjeni dobri podaci</response>
             <response code = "401">Korisnik nije ulogovan</response>
             <response code = "404">Ne postoji tip korisnika sa zadatim id-em</response>
        </member>
        <member name="M:KorisnikServis.Controllers.TipKorisnikaController.Delete(System.Guid)">
            <summary>
            Brisanje postojeceg tipa korisnika, 
            uz logovanje navedene aktivnosti, kao i korisnickog imena korisnika koji je izvrsio tu aktivnost u okviru loggera
            </summary>
            <param name="id">Parametar id-a tipa korisnika za kojeg se vrsi brisanje</param>
            <returns>Brise zadati tip korisnika</returns>
            <response code = "200">Obrisan je tip korisnika</response>
            <response code = "401">Korisnik nije ulogovan</response>
            <response code = "404">Ne postoji tip korisnika za kojeg se izvrsava brisanje</response>
        </member>
        <member name="T:KorisnikServis.Database.Entities.Korisnik">
            <summary>
            Korisnik entity
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.Korisnik.KorisnikID">
            <summary>
            Id korisnika, primarni kljuc
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.Korisnik.ImeKorisnika">
            <summary>
            Ime korisnika 
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.Korisnik.PrezimeKorisnika">
            <summary>
            Prezime korisnika
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.Korisnik.KorisnickoIme">
            <summary>
            Korisnicko ime korisnika
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.Korisnik.Lozinka">
            <summary>
            Lozinka korisnika
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.Korisnik.TipKorisnikaID">
            <summary>
            Tip korisnika
            </summary>
        </member>
        <member name="T:KorisnikServis.Database.Entities.TipKorisnika">
            <summary>
            TipKorisnika entity
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.TipKorisnika.TipKorisnikaID">
            <summary>
            Id tipa korisnika,  primarni kljuc
            </summary>
        </member>
        <member name="P:KorisnikServis.Database.Entities.TipKorisnika.NazivTipa">
            <summary>
            Naziv tipa korisnika
            </summary>
        </member>
        <member name="T:KorisnikServis.Services.KorisnikService">
            <summary>
            Korisnik servis klasa
            </summary>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.#ctor">
            <summary>
            Korisnik servis konstruktor
            </summary>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.GetAll">
            <summary>
            Getovanje svih korisnika iz baze
            </summary>
            <returns>Vraca sve korisnike iz baze</returns>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.FindImeLozinka(System.String,System.String)">
            <summary>
            Pronalazenje korisnika iz baze po korisnickom imenu i lozinci
            </summary>
            <param name="KorisnickoIme"></param>
            <param name="Lozinka"></param>
            <returns>Vraca korisnika sa zadatim korisnickim imenom i lozinkom</returns>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.GetById(System.Guid)">
            <summary>
            Getovanje korisnika po zadatom id-u
            </summary>
            <param name="id"></param>
            <returns>Vraca korisnika sa zadatim id-em</returns>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.GetByTip(System.String)">
            <summary>
            Getovanje korisnika po zadatoj ulozi koju ima
            </summary>
            <param name="nazivTipa"></param>
            <returns>Vraca korisnika sa datom ulogom</returns>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.GetKorisnikByToken(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Getovanje korisnika po zadatom tokenu
            </summary>
            <param name="identityClaims"></param>
            <returns>Vraca korisnika sa zadatim tokenom</returns>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.Save(KorisnikServis.Database.Entities.Korisnik)">
            <summary>
            Dodavanje novog korisnika
            </summary>
            <param name="korisnik"></param>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.Update(KorisnikServis.Database.Entities.Korisnik)">
            <summary>
            Modifikovanje korisnika
            </summary>
            <param name="korisnik"></param>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.KorisnikExists(System.Guid)">
            <summary>
            Provera postojanja korisnika u bazi
            </summary>
            <param name="id"></param>
            <returns>Vraca true ili false u zavisnosti od postojanja</returns>
        </member>
        <member name="M:KorisnikServis.Services.KorisnikService.Delete(KorisnikServis.Database.Entities.Korisnik)">
            <summary>
            Brisanje korisnika
            </summary>
            <param name="korisnik"></param>
        </member>
        <member name="T:KorisnikServis.Services.TipKorisnikaService">
            <summary>
            Tip korisnika servis klasa
            </summary>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.#ctor">
            <summary>
            Tip korisnika servis konstruktor
            </summary>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.GetAll">
            <summary>
            Getovanje svih tipova korisnika
            </summary>
            <returns>Vraca sve tipove korisnika</returns>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.GetById(System.Guid)">
            <summary>
            Getovanje svih tipova korisnika po zadatom id-u
            </summary>
            <param name="id"></param>
            <returns>Vraca tip korisnika sa zadatim id-em</returns>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.Save(KorisnikServis.Database.Entities.TipKorisnika)">
            <summary>
            Dodavanje novog tipa korisnika
            </summary>
            <param name="tipKorisnika"></param>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.Update(KorisnikServis.Database.Entities.TipKorisnika)">
            <summary>
            Modifikovanje tipa korisnika
            </summary>
            <param name="tipKorisnika"></param>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.TipKorisnikaExists(System.Guid)">
            <summary>
            Provera da li tip korisnika postoji u bazi
            </summary>
            <param name="id"></param>
            <returns>Vraca true ili false u zavisnosti od postojanja</returns>
        </member>
        <member name="M:KorisnikServis.Services.TipKorisnikaService.Delete(KorisnikServis.Database.Entities.TipKorisnika)">
            <summary>
            Brisanje tipa korisnika
            </summary>
            <param name="tipKorisnika"></param>
        </member>
    </members>
</doc>
